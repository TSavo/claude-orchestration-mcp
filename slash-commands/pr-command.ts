#!/usr/bin/env npx tsx

import { BaseCommand, CommandArgs, CommandResult } from './base-command.js';

export class PrCommand extends BaseCommand {
  async execute(args: CommandArgs): Promise<CommandResult> {
    const { 
      title = 'auto', 
      base = 'main', 
      draft = false, 
      reviewers = [], 
      template = 'standard' 
    } = args;

    const existingTeam = this.detectExistingTeam();
    const project = this.getCurrentProject();
    
    // Smart defaults
    const finalTitle = title === 'auto' ? this.generatePRTitle() : title;
    const finalReviewers = reviewers.length === 0 ? this.selectReviewers(existingTeam.agents) : reviewers;
    
    const prPrompt = `PULL REQUEST CREATION REQUEST:

Title: ${finalTitle}
Base Branch: ${base}
Draft Status: ${draft}
Reviewers: ${finalReviewers.join(', ') || 'Auto-selected from team'}
Template: ${template}
Project: ${project.name}
Working Directory: ${project.directory}

PULL REQUEST PROTOCOL:
1. PRE-PR VALIDATION:
   - Ensure current branch has commits ahead of ${base}
   - Verify all changes are committed and pushed
   - Check branch is up to date with remote
   - Run any pre-PR checks (tests, linting)

2. PR CONTENT GENERATION:
   ${this.getPRTemplate(template)}

3. PR CREATION using GitHub CLI:
   - Use: gh pr create with comprehensive description
   - Add appropriate labels based on change type
   - Assign reviewers from team: ${finalReviewers.join(', ')}
   - Set milestone and project if applicable

GITHUB COMMANDS TO EXECUTE:
\`\`\`bash
# Verify branch status
git status
git log --oneline ${base}..HEAD

# Create pull request
gh pr create \\
  --title "${finalTitle}" \\
  --body "$(cat <<'EOF'
${this.generatePRBody(template)}
EOF
)" \\
  --base ${base} \\
  ${draft ? '--draft \\' : ''}
  --reviewer "${finalReviewers.join(',')}" \\
  --label "${this.generatePRLabels(project.type).join(',')}"

# Add to project if applicable
gh pr edit --add-project "${project.name}"
\`\`\`

PR METADATA:
- Labels: ${this.generatePRLabels(project.type).join(', ')}
- Reviewers: ${finalReviewers.join(', ')}
- Base branch: ${base}
- Type: ${draft ? 'Draft (work in progress)' : 'Ready for review'}

TEAM COORDINATION:
- Notify assigned reviewers via chat about new PR
- Update team on PR scope and review timeline
- Coordinate any blocking dependencies or requirements
- Set expectations for review completion

POST-CREATION ACTIONS:
- Monitor PR for review feedback and conflicts
- Respond to review comments promptly
- Keep PR updated with base branch if needed
- Coordinate merge timing with team schedule

Execute GitHub pull request creation with comprehensive documentation and team coordination.`;

    return this.createPromptResult(prPrompt);
  }

  private generatePRTitle(): string {
    return 'feat: Development team changes for current feature';
  }

  private selectReviewers(agents: string[]): string[] {
    // Select reviewers from team, excluding the likely author
    return agents.slice(1, 3); // Take 1-2 other team members as reviewers
  }

  private getPRTemplate(template: string): string {
    const templates = {
      'standard': '   - Summary of changes and motivation\n   - Test plan and validation steps\n   - Breaking changes or migrations\n   - Screenshots or demos if UI changes',
      'feature': '   - Feature description and user stories\n   - Implementation approach and architecture\n   - Testing strategy and coverage\n   - Documentation updates',
      'bugfix': '   - Bug description and root cause analysis\n   - Fix implementation and validation\n   - Regression testing approach\n   - Impact assessment',
      'hotfix': '   - Critical issue description and urgency\n   - Minimal change approach and risk assessment\n   - Emergency validation and rollback plan\n   - Stakeholder communication'
    };
    
    return templates[template] || templates['standard'];
  }

  private generatePRBody(template: string): string {
    const body = `## Summary
[Auto-generated PR from development team]

## Changes
- [List key changes made in this PR]

## Test Plan
- [ ] Unit tests passing
- [ ] Integration tests passing
- [ ] Manual testing completed

## Checklist
- [ ] Code follows project style guidelines
- [ ] Self-review of code completed
- [ ] Documentation updated if needed
- [ ] No breaking changes (or migration guide provided)

## Additional Context
Generated by development team as part of current work cycle.
Review commit history for detailed changes.`;

    return body;
  }

  private generatePRLabels(projectType: string): string[] {
    const labels = ['enhancement'];
    
    // Add project type labels
    if (projectType.includes('React')) labels.push('frontend');
    else if (projectType.includes('API')) labels.push('backend');
    else if (projectType.includes('Node')) labels.push('javascript');
    else if (projectType.includes('Python')) labels.push('python');
    
    labels.push('review-needed');
    
    return labels;
  }
}